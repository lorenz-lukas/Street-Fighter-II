#########################################################################################################
# Rotina que le do teclado e grava sequencia de teclas							#
# Teclas usadas: x,c,v,d (movimento Player 1); 4,5,6,8 (movimento Player 2);				#
# 		t,y,u,g,h,j (ataque player 1); Ins,Home,PageUp,PageDown,End,Del (ataque player 2)	#
# Valores de retorno:											#
# $v0 -> Ultima tecla valida pressionada (byte 0) e uma flag que indica de qual jogador eh		#
#        a tecla (penultimo byte 1), sendo 1 o 'player 1' e 0 o 'player 2'				#
# $v1 -> Tem dois codigos que indicam o movimento para o jogador 1 (Byte 2) e do jogador 2 (byte 0)	#
#        O codigo e a soma das teclas pressionadas, onde cada tecla vale:				#
#        pulo = 1; agachar = 2; andar p/ frente = 4; andar p/ tras = 8;					#
#        Ex: Pular para frente: 1+4 = 5									#
# BuffJ1 e BuffJ2 -> Espacos de memoria, declarados no .data; Guarda a sequencia de teclas pressionadas	#
#                    para cada jogador, usados para realizar os especiais.				#
#########################################################################################################
.data
.align 2
#Teclas do jogador 1
BuffJ1:	.space 8		#buffer que registra a sequencia de teclas do jogador 1
BuffJ2:	.space 8		#buffer que registra a sequencia de teclas do jogador 2
Cnt:	.word 0			
X:	.word 0x22		#codigo da tecla
kX:	.word 0x00000004	#codigo do keymap
V:	.word 0x2A
kV:	.word 0x00000400
C:	.word 0x21
kC:	.word 0x00000002
D:	.word 0x23
kD:	.word 0x00000008
T:	.word 0x2C
kT:	.word 0x00001000
Y:	.word 0x35
kY:	.word 0x00200000
U:	.word 0x3C
kU:	.word 0x10000000
G:	.word 0x34
kG:	.word 0x00100000
H:	.word 0x33
kH:	.word 0x00080000
J:	.word 0x3B
kJ:	.word 0x08000000
#Teclas do jogador 2
T4:	.word 0x6B
k4:	.word 0x00000800
T5:	.word 0x73
k5:	.word 0x00080000
T6:	.word 0x74
k6:	.word 0x00100000
T8:	.word 0x75
k8:	.word 0x00200000
Ins:	.word 0x70
kIns:	.word 0x00010000
Home:	.word 0x6C
kHome:	.word 0x00001000
Pup:	.word 0x7D
kPup:	.word 0x20000000
Del:	.word 0x71
kDel:	.word 0x00020000
End:	.word 0x69
kEnd:	.word 0x00000200
PDown:	.word 0x7A
kPDown:	.word 0x04000000
END:	.word 0x00000000
.text

LP:

#Carregando os Buffers J
la	$s1,BuffJ1
la	$s2,BuffJ2

#carrega o ultimo codigo do Buffer 0
la	$t0,0xFF100100	#BUFFER 0
la	$s0,0xFF100524	#KEY 1
la	$s4,0xFF10052C	#KEY 4
lb	$t8,0($t0)	#ultima tecla no buffer
la	$s5,T4		#Primeira tecla do Jogador 2
la	$t2,X		#Primeira tecla do Jogador 1
move	$t4,$zero	#inicializa a flag a ser usada no EscreveBuff

#Analisa o movimento (andar para direita ou esquerda e abaixar)
li	$t3,8		#Carrega o peso da tecla
li	$v1,0		#Zera o registrador de retorno
move	$t1,$s0		#Copia o KEY1 para $t1
MOV:
lw	$t7,0($t1)	#carrega o KEY
lw	$t6,4($t2)	#carrega o keymap do .data
and	$t7,$t6,$t7
#comparacao
bne	$t7,$t6,CMOV
add	$v1,$v1,$t3	#Soma o peso caso esteja pressionado
CMOV:
addi	$t2,$t2,8	#Passa para o proxima tecla do .data
srl	$t3,$t3,1	#Divide o peso por 2
bne	$t3,0,MOV	#Testa se as comparacoes acabaram
#carrega os dados para analise do jogador 2
slt	$t1,$s5,$t2	#Compara se a analise do movimento do J2 ja foi feito
la	$t2,X		#Carrega X (para a rotina cmp)
bne	$t1,$zero,cmp	#Passa para a verificacao do buffer caso o movimento do J2 ja tenha sido analisado
li	$t3,8		#Reinicia o peso
sll	$v1,$v1,16	#Shifta o registrador de retorno
move	$t2,$s5		#Coloca a tecla 4 do .data no $t2
move	$t1,$s4		#Coloca o KEY4 no $t1
j	MOV

#comparar o codigo com as teclas validas
cmp:
lw	$t1,0($t2)	#Carrega o codigo a ser testado
beq	$t8,$t1,kcmp	#Compara o codigo. Se for uma tecla valida vai para comparacao do KeyMap
addi	$t2,$t2,8	#Passa para o proximo código
beq	$t1,$zero,ERRO	#Verifica se acabaram as os codigos para testar
j	cmp
#comparar com o keymap e descobrir se a tecla esta sendo pressionada agora
kcmp:
#verifica de qual jogador eh a tecla. Se $s6 = 1 entao eh o jogador 1
slt	$s6,$t2,$s5
lw	$t1,4($t2)	#Carrega o keymap da tecla detectada, que esta no .data

#Seleciona entre o Key1 (J1) ou Key4 (J2)
move	$t9,$s4
beq	$s6,$zero,KJ2
move	$t9,$s0
KJ2:
lw	$t3,0($t9)	

and	$t3,$t1,$t3
beq	$t1,$t3,HIT

#Erro: a tecla nao eh valida ou nao esta pressionada
ERRO:
li	$s6,2		#Seta flag em 2 -> tecla invalida
li	$v0,0
li	$t8,0
j	Contador

#HIT: a tecla eh valida e esta pressionada
HIT:
move	$v0,$t8

Contador:
#recuperando o contador
la	$t1, Cnt
lw	$t1, 0($t1)
#Armazena no Buffer se $t1 == valor max
beq	$t1,10001,grava
addi	$t1,$t1,1
sw	$t1,Cnt
#jr	$ra
j	LP

grava:
beq	$t1,10001,EscreveBuff	#Escreve no Buffer - primeira vez
bne	$s6,$s7,EscreveBuff	#Escreve no Buffer - segunda vez, se tiver uma tecla para escrever do outro jogador
addi	$t1,$t1,1		#Se nao leu uma tecla do outro jogador, continua o tempinho
move	$t8,$zero		#$t8 vai ser gravado no buffer
beq	$t1,20001,EscreveBuff	#Se acabar o tempinho, grava 0 no buffer
#Colocar coisas para chamar cmp
la	$t2,X		#Primeira tecla do Jogador 1
la	$t0,0xFF100100	#BUFFER 0
lb	$t8,0($t0)	#ultima tecla no buffer
j	cmp	

EscreveBuff:

addi	$t1,$t1,1	#Inicia o tempinho
move	$s7,$s6		#Copia a flag do jogador que gravou a primeira vez
addi	$t4,$t4,1	#Incrementa a flag que conta quantas vezes escreveu
#Shift para esquerda do Buffer. Seleciona BuffJ1 ou BuffJ2 dependendo da flag $s6
move	$t9,$s2
beq	$s6,$zero,BJ2
move	$t9,$s1
BJ2:
lw	$t2,4($t9)
sll	$t2,$t2,8
lb	$t5,3($t9)
or	$t2,$t2,$t5
sw	$t2,4($t9)
lw	$t2,0($t9)
sll	$t2,$t2,8
sw	$t2,0($t9)
#grava no ultimo Byte
sb	$t8,0($t9)
#Se estiver passando pela primeira vez e nenhuma tecla foi gravada, gravar nada para o outro jogador tambem
bne	$v0,$zero,leitura2
li	$s6,0		#seta a flag em 0
beq	$t4,1,EscreveBuff
#Definir coisas para o cmp
leitura2:
la	$t2,X		#Primeira tecla do Jogador 1
la	$t0,0xFF100100	#BUFFER 0
lb	$t8,0($t0)	#ultima tecla no buffer
bne	$t4,2,cmp	#testa se ja gravou nos dois buffers

#reinicializa a contagem
la	$t1, Cnt
sw	$zero, 0($t1)

#exibe na tela (teste somente)
lw	$a0,0($s1)
lw	$a1,4($s1)
lw	$a2,0($s2)
lw	$a3,4($s2)

#jr	$ra
#loop da função
j	LP
